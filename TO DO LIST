#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Task {
public:
    string description;
    bool completed;

    Task(string description) {
        this->description = description;
        this->completed = false;
    }
};

vector<Task> tasks;

void addTask(string description) {
    tasks.push_back(Task(description));
}

void viewTasks() {
    cout << "Task list:" << endl;
    for (int i = 0; i < tasks.size(); i++) {
        cout << (tasks[i].completed ? "[X] " : "[ ] ") << tasks[i].description << endl;
    }
}

void markTaskAsCompleted(int index) {
    if (index >= 0 && index < tasks.size()) {
        tasks[index].completed = true;
    }
}

void removeTask(int index) {
    if (index >= 0 && index < tasks.size()) {
        tasks.erase(tasks.begin() + index);
    }
}

int main() {
    int choice;
    string taskDescription;

    while (true) {
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Mark Task as Completed" << endl;
        cout << "4. Remove Task" << endl;
        cout << "5. Quit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter task description: ";
                cin.ignore();
                getline(cin, taskDescription);
                addTask(taskDescription);
                break;
            case 2:
                viewTasks();
                break;
            case 3:
                cout << "Enter task index: ";
                cin >> choice;
                markTaskAsCompleted(choice - 1);
                break;
            case 4:
                cout << "Enter task index: ";
                cin >> choice;
                removeTask(choice - 1);
                break;
            case 5:
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }

        cout << endl;
    }

    return 0;
    
}
